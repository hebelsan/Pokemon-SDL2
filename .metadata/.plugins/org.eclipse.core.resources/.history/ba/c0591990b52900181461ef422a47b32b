#include "buttonAction.hpp"
#include "input.hpp"
#include "player.hpp"
#include "npc.hpp"
#include "level.hpp"

#include <iostream>

namespace btnAction {

	// handle Player movement
	void handleArrowKeys(Input &input, Player &player) {
		SDL_Scancode arrowKey = input.getPressedArrowKey();
		if (arrowKey == SDL_SCANCODE_UNKNOWN) {
			player.stopMoving();
		}
		else if (arrowKey == SDL_SCANCODE_LEFT) {
			player.moveLeft();
		}
		else if (arrowKey == SDL_SCANCODE_RIGHT) {
			player.moveRight();
		}
		else if (arrowKey == SDL_SCANCODE_UP) {
			player.moveUp();
		}
		else if (arrowKey == SDL_SCANCODE_DOWN) {
			player.moveDown();
		}
	}

	// handle EscapeKey
	void handleEscapeKey(Input &input) {
		if (input.wasKeyPressed(SDL_SCANCODE_ESCAPE) == true) {
			exit(0);
		}
	}

	// handle A Button
	void handleButtonA(Input &input, Level &level, Player &player) {
		if (input.wasKeyPressed(SDL_SCANCODE_A) == true) {
			std::vector<Npc*> levelNpcs = level.getNpcs();
			Direction playersDirection = player


			// loop each npc and check position to player
			std::cout << "player Position top: " << player.getBoundingBox().getTop() << std::endl;
			for (int i = 0; i < levelNpcs.size(); i++) {
				std::cout << "npc bottom: " << levelNpcs.at(i)->getBoundingBox().getBottom()  << std::endl;
			}

		}
	}

}



